1.  In your own words, explain the benefits of normalization. Include a real-world scenario where   normalization is necessary.
  Normalization is used to organize and group data into various tables to avoid redundancy.
  In a tabled when an attribute is dependent on another attribute that isn't the primary key, it may be necessary to separate the data into different tables.

  In an online lead generation company there is a database for leads. This database has fields for  lead id, lead title, lead email, lead department, lead department code, business_opportunity and company name. It is not required to have an attribute field for the lead's company phone number . The company's phone number is dependent on the company name. If you wanted to create 2 leads from the same company, the phone number would have to be entered twice. A more efficient system can be created with normalization by creating a table for the company.

2. List and explain the different normal forms and how they relate to one another, with regard to your real-world scenario in the first question.
  First normal form (1NF): A column cannot have multiple values in one field.
  A lead can have multiple phone numbers. Instead of inserting all of the phone numbers in one field, we can create a different column for each type of phone number.

  Second normal form (2NF): The table must be in 1NF.
  An attribute cannot be dependent on a subset of the primary key.
   The company's phone number is dependent on the company name field which is a subset of the primary key. We would need to create a table for the company and store its's attributes there.

  Third normal form (3NF): An attribute cannot be dependent on another attribute that is not the primary key.
  Any non-key attributes that are more dependent on other non-key attributes than the primary key need to be moved to a new table.
  The department code is more dependent on department name than the lead id.  It would need to be moved to a new Department table.

  Boyce Codd normal form (BCNF): Similar to 3NF, but all attributes must be dependent on super keys.  BCNF acts differently from 3NF only when there are multiple overlapping candidate keys.
  To satisfy BCNF requirements, I would make sure that all tables  contain attributes that depend on super keys.
  The business_opportunity is a non-prime candidate and would need to be moved to its own table.

3. This student_records table contains students and their grades in different subjects. The schema is already in first normal form (1NF). Convert this schema to the third normal form (3NF) using the techniques you learned in this checkpoint.

CREATE TABLE students (
  "id"       INTEGER,
  "student_email"  VARCHAR(24),
  "student_name"   VARCHAR(9),

  PRIMARY KEY ("id")
);

CREATE TABLE professors (
  "id"       INTEGER,
  "professor_name" VARCHAR(9),
  "subject"        VARCHAR(11),

  PRIMARY KEY ("id")
);

CREATE TABLE subjects (
  "id"       INTEGER,
  "subject"        VARCHAR(11),

  PRIMARY KEY ("id")
);

CREATE TABLE student_records (
  "id"       INTEGER,
  "student_id"     INTEGER,
  "professor_id"   INTEGER,
  "subject_id"     INTEGER,
  "grade"          VARCHAR(1),

  FOREIGN KEY ("student_id")
  REFERENCES "students" ("id")
  ON DELETE CASCADE,

  FOREIGN KEY ("professor_id")
  REFERENCES "professors" ("id")
  ON DELETE CASCADE,

  FOREIGN KEY ("subject_id")
  REFERENCES "subjects" ("id")
  ON DELETE CASCADE,

  PRIMARY KEY ("id")
);

INSERT INTO students
    ("id", "student_email", "student_name")
    VALUES
    ( 1,    'john.b20@hogwarts.edu',    'John B'),
    ( 2,    'sarah.s20@hogwarts.edu',   'Sarah S'),
    ( 3,    'martha.l20@hogwarts.edu',  'Martha L'),
    ( 4,    'james.g20@hogwarts.edu',   'James G'),
    ( 5,    'stanley.p20@hogwarts.edu', 'Stanley P');

INSERT INTO professors
    ("id", "professor_name", "subject")
    VALUES
    ( 11,             'William C',      'Philosophy'),
    ( 22,             'Mark W',         'Mathematics'),
    ( 33,             'Natalie M',      'Economics');

    INSERT INTO subjects
        ("id", "subject")
        VALUES
        ( 11,          'Philosophy'),
        ( 22,          'Mathematics'),
        ( 33,          'Economics');

INSERT INTO student_records
    ("id", "student_id", "professor_id","subject_id", "grade")
    VALUES
    ( 1,    1,   2, 11,  'A'),
    ( 2,    2,   2, 11,  'C'),
    ( 3,    3,   1, 33,  'A'),
    ( 4,    4,   3, 22,  'B'),
    ( 5,    5,   1, 33,  'B');


4. In your own words, explain the potential disadvantages of normalizing the data above. What are its trade-offs? Submit your findings in the submission table and discuss them with your mentor in your next session.
  The main disadvantage of normalizing is the complexity when querying the database.  Since there are more tables, more joins are needed.

5. Looking at the tables you have normalized. If you need to denormalize to improve query performance or speed up reporting, how would you carry out denormalization for this database design?

  Submit potential strategies in the submission tab and discuss them with your mentor in your next session.
  It may be a good idea to combine the subject and the professor tables to improve query performance and speed.  There is a high likelihood that a student may only see a professor once for one subject.

6. Explore the trade-offs between data normalization and denormalization in this scenario, submit your findings in the submission tab, and discuss them with your mentor in your next session.
  When normalizing and denormalizing, we need to analyze how the data is being used. If a  set of data is constantly being accessed together, then it would be more useful to have the data available on the same table.

1. How do you find related data that is held in two separate data tables?
  To find related data that is held in 2 separate data tables, use a JOIN statement and match a primary key in one table with the foreign key in another table.

2. Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN. Give a real world example for each.
  CROSS JOIN: Combines tables and returns all combinations of rows and columns.
  Example: find all combinations of pizza types using 2 tables...sauce table and toppings table.

  INNER JOIN: Returns a joined table that displays records that fulfills the condition in both tables...usually linking a primary key with a foreign key.
  Example: display a new table showing the students (from the "students" table) and their test scores (from the "test_scores" table)...assuming each student has a test score.

  LEFT OUTER JOIN: Returns a joined table that displays a record for every record on the left table...with a matching record from the right table...or null if match is not found in the right table.
  Example: display a new table showing ALL the students (from the "students" table) and their related test scores (from the "test_scores" table)...students that did not take a particular test will still be displayed with a value of NULL.

  RIGHT OUTER JOIN: Returns a joined table that displays a record for every record on the right table... with a matching record from the left table... or null if match is not found.
  Examples: display a new table showing ALL the test scores (from the "test_scores" table) and the related students (from the "students" table)...scores of practice tests taken by teachers will still be displayed with a student_id value of NULL.


  FULL OUTER JOIN: Returns a joined table that displays a record for for every record on the left and right table with matching records from both tables. Null is inserted instead if a matching record is not found.
  Example: display a new table showing the students (from the "students" table) and their test scores (from the "test_scores" table)...students that did not take a particular test will still be displayed...scores of tests taken by non-students will also be displayed.

3. Define primary key and foreign key. Give a real world example for each.
A primary key is unique identifier for a record.  A primary key can only be used once in a table.  A foreign key is a identifier that references to a primary key and can be used more than once in a table.
Example: In a classroom, a primary key can be used to uniquely identify the different students. The test scores can be held at a different table with a foreign key that points to the student that has taken the test.

4. Define aliasing.
  Aliasing is used to abbreviate the name of tables in a query.

5. Change this query so that you are using aliasing:
  SELECT professor.name, compensation.salary, compensation.vacation_days FROM professor
  JOIN compensation
  ON professor.id = compensation.professor_id;

  SELECT prof.name, comp.salary, comp.vacation_days
  FROM professor AS prof
  JOIN compensation AS comp
  ON prof.id = comp.professor_id;

6. Why would you use a NATURAL JOIN? Give a real world example.
  A NATURAL JOIN automatically constructs a USING list comprise of only the shared column names that appear in all tables...We do not need to type the list...It can compare multiple keys.
  Example: Supposed we have a table of student with columns for student_id name, ssn, address and a table for test with columns for ssn, test_score and address.
  A new table can be made using the NATURAL JOIN.  The shared columns will serve as the keys for comparison.(ex: student.ssn = test.ssn)

7.Using this Employee schema and data, write queries to find the following information: All employees with their shifts if they have any. Also include any unscheduled shifts.
  SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time, scheduled_shifts.shift_id
  FROM employees
  JOIN scheduled_shifts
  ON scheduled_shifts.employee_id = employees.id
  RIGHT JOIN shifts
  ON scheduled_shifts.shift_id = shifts.id

  name	            date	      start_time	end_time	shift_id
  Hermione Granger	1998-03-09	08:00:00	16:00:00	  2
  Hermione Granger	1998-03-10	08:00:00	16:00:00	  7
  Hermione Granger	1998-03-11	08:00:00	16:00:00	  12
  Hermione Granger	1998-03-12	08:00:00	16:00:00	  17
  Hermione Granger	1998-03-13	08:00:00	16:00:00	  22
  Ronald Weasley	  1998-03-10	12:00:00	16:00:00	  8
  Ronald Weasley	  1998-03-12	12:00:00	16:00:00	  18
  Luna Lovegood	    1998-03-09	12:00:00	16:00:00	  3
  Luna Lovegood	    1998-03-11	12:00:00	16:00:00	  13
  Luna Lovegood	    1998-03-13	12:00:00	16:00:00	  23
  Draco Malfoy	    1998-03-11	16:00:00	20:00:00	  15
  Draco Malfoy	    1998-03-12	16:00:00	20:00:00	  20
  Draco Malfoy	    1998-03-13	16:00:00	20:00:00	  25
  Padma Patil	      1998-03-09	12:00:00	20:00:00	  4
  Padma Patil	      1998-03-10	12:00:00	20:00:00	  9
  Padma Patil	      1998-03-11	12:00:00	20:00:00	  14
  Padma Patil	      1998-03-09	08:00:00	12:00:00	  1
  Padma Patil	      1998-03-10	08:00:00	12:00:00	  6
  Padma Patil	      1998-03-11	08:00:00	12:00:00	  11
  Cho Chang	        1998-03-12	12:00:00	20:00:00	  19
  Cho Chang	        1998-03-13	12:00:00	20:00:00	  24
  Dean Thomas	      1998-03-09	16:00:00	20:00:00	  5
  Dean Thomas	      1998-03-10	16:00:00	20:00:00	  10
  null	            1998-03-13	08:00:00	12:00:00	  null
  null	            1998-03-12	08:00:00	12:00:00	  null


8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:
  All volunteers. If the volunteer is fostering a dog, include each dog as well.
  SELECT  v.first_name, v.last_name, d.name
  FROM volunteers AS v
  LEFT JOIN dogs AS d
  ON v.foster_dog_id = d.id;

  The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
    SELECT c.name, a.first_name, cat_ad.date
    FROM cats AS c
    JOIN cat_adoptions AS cat_ad
    ON c.id = cat_ad.cat_id
    JOIN adopters AS a
    ON cat_ad.adopter_id = a.id
    WHERE cat_ad.date > CURRENT_DATE - INTERVAL '30 DAYS';

    name	    first_name	date
    Mushi	    Arabella	  2018-07-15T00:00:00.000Z
    Victoire  Argus	      2018-07-20T00:00:00.000Z

  Adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.
    SELECT a.first_name, a.last_name, dogs.name, dogs.in_foster, da.date
    FROM adopters AS a
    LEFT JOIN dog_adoptions AS da
    ON a.id = da.adopter_id
    CROSS JOIN dogs
    WHERE da.adopter_id IS NULL AND dogs.in_foster IS NULL;

    first_name	last_name	name	  in_foster	date
    Hermione	Granger	Boujee	    null	     null
    Hermione	Granger	Munchkin	  null	     null
    Hermione	Granger	Marley	    null	     null
    Hermione	Granger	Lassie	    null	     null
    Hermione	Granger	Marmaduke	  null	     null
    Hermione	Granger	Rosco	      null	     null
    Arabella	Figg	  Boujee	    null	     null
    Arabella	Figg	  Munchkin	  null	     null
    Arabella	Figg	  Marley	    null	     null
    Arabella	Figg	  Lassie	    null	     null
    Arabella	Figg	  Marmaduke	  null	     null
    Arabella	Figg	  Rosco	  	  null       null

  Lists of all cats and all dogs who have not been adopted.
    SELECT dogs.name
    FROM dog_adoptions
    RIGHT JOIN dogs ON dog_adoptions.dog_id = dogs.id
    WHERE dog_adoptions.dog_id IS NULL;

    name
    Boujee
    Munchkin
    Marley
    Lassie
    Marmaduke

    SELECT cats.name
    FROM cat_adoptions
    RIGHT JOIN cats ON cat_adoptions.cat_id = cats.id
    WHERE cat_adoptions.cat_id IS NULL;

    name
    Seashell
    Nala

  Volunteers who are available to foster. If they currently are fostering a dog, include the dog. Also include all dogs who are not currently in foster homes.
    SELECT v.first_name, v.last_name, v.available_to_foster, v.foster_dog_id, d.in_foster, d.name
    FROM volunteers AS v
    FULL OUTER JOIN dogs as d
    ON v.foster_dog_id = d.id;

    first_name	last_name	   available_to_foster	foster_dog_id	  in_foster	name
    null	      null	       null	                null	          null	    Boujee
    Rubeus	    Hagrid	     true	                10002	          null	    Munchkin
    null	      null	       null	                null	          null	    Marley
    null	      null	       null	                null	          null	    Lassie
    Marjorie	  Dursley	     true	                10006	          null	    Marmaduke
    null	      null	       null	                null	          null	    Rosco
    Sirius	    Black	       true	                null	          null	    null
    Remus	      Lupin	       true	                null	          null	    null
    Albus	      Dumbledore   false	              null	          null	    null

  The name of the person who adopted Rosco.
    SELECT adopters.first_name, adopters.last_name
    FROM dog_adoptions
    JOIN dogs
    ON dog_adoptions.dog_id = dogs.id
    JOIN adopters
    ON dog_adoptions.adopter_id = adopters.id
    WHERE dogs.name = 'Rosco';

9. Using this Library schema and data, write queries applying the following scenarios:
  To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

    SELECT p.name, h.patron_id, h.rank, b.title
    FROM patrons AS p
    JOIN holds AS h ON p.id = h.patron_id
    JOIN books AS b ON h.isbn = b.isbn
    WHERE b.title = 'Advanced Potion-Making'
    ORDER BY h.rank ASC;

    name	           patron_id	rank	title
    Terry Boot	     2	        1	    Advanced Potion-Making
    Cedric Diggory	 5	        2	    Advanced Potion-Making

  Make a list of all book titles and denote whether or not a copy of that book is checked out.
    SELECT b.title, t.checked_out_date, t.checked_in_date,
    CASE WHEN t.checked_in_date IS NULL THEN 'Unavailable'
    WHEN t.checked_in_date IS NOT NULL THEN 'Available'
    END AS status
    FROM books AS b
    LEFT JOIN transactions AS t ON t.isbn = b.isbn;

    title	checked_out_date	checked_in_date	status
    Hogwarts: A History	2012-08-04T00:00:00.000Z	2012-08-05T00:00:00.000Z	Available
    Advanced Potion-Making	2012-08-04T00:00:00.000Z	2012-08-05T00:00:00.000Z	Available
    Fantastic Beasts and Where to Find Them	2012-08-04T00:00:00.000Z	2012-08-05T00:00:00.000Z	Available
    Fantastic Beasts and Where to Find Them	2018-07-29T00:00:00.000Z	2018-08-01T00:00:00.000Z	Available
    Advanced Potion-Making	2018-08-02T00:00:00.000Z	null	Unavailable
    Fantastic Beasts and Where to Find Them	2018-08-02T00:00:00.000Z	2018-08-04T00:00:00.000Z	Available
    Fantastic Beasts and Where to Find Them	2018-08-04T00:00:00.000Z	null	Unavailable

  In an effort to learn which books take longer to read, the librarians would like you to create a list of average checked out time by book name in the past month.

    SELECT AVG(t.checked_in_date - t.checked_out_date) AS avg_out_time, b.title
    FROM transactions AS t
    JOIN books AS b ON t.isbn = b.isbn
    /* WHERE t.checked_out_date > CURRENT_DATE - INTERVAL '30 DAYS' */
    GROUP BY b.title
    ORDER BY avg_out_time DESC;

    avg_out_time	          title
    2.0000000000000000	    Fantastic Beasts and Where to Find Them
    1.00000000000000000000	Advanced Potion-Making
    1.00000000000000000000	Hogwarts: A History

  In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.

    SELECT b.title, MAX(t.checked_out_date) AS last_checked_out
    FROM books AS b
    JOIN transactions AS t ON t.isbn = b.isbn
    GROUP BY b.title
    HAVING MAX(t.checked_out_date) < CURRENT_DATE - INTERVAL '5 YEARS';

    title	                last_checked_out
    Hogwarts: A History	  2012-08-04T00:00:00.000Z

  List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.

    SELECT p.name, b.title, t.checked_out_date, t.checked_in_date
    FROM patrons AS p
    JOIN transactions AS t ON t.patron_id = p.id
    JOIN books AS b ON t.isbn = b.isbn
    WHERE t.checked_in_date IS NULL;
    name	title	checked_out_date	checked_in_date

    Terry Boot	Advanced Potion-Making	2018-08-02T00:00:00.000Z	null
    Cedric Diggory	Fantastic Beasts and Where to Find Them	2018-08-04T00:00:00.000Z	null

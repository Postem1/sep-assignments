1. Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(n**2).

  Ans:  An algorithm that has efficiency O(1) would be very quick.  Whatever size collection is loaded in, the answer would be found during the first operation. An analogy would be a top of the line, brand new, 800-HP, Ferrari 812.
  An algorithm that has efficiency of 0(2^n) would take more and more time to find the answer as the size of the input grow.  An analogy would be a 20 year old 109-HP Nissan Versa (that breaks down from time to time)

2. In plain English, what is the best case scenario for binary search?
  The best case scenario for binary search would be when the function finds the (answer) element during the first operation...The element is at the middle of the collection

3. In plain English, what is the worst-case scenario for binary search?
  Worst case scenario for binary search would be when the function finds the (answer) element after cutting the collection down to about 3 elements....  This would happen when the (answer) element is near the beginning or near the end of the collection.

4. In plain English, what is the bounded-case scenario for binary search?
  The bounded case for binary search would be when the (answer) element if found after a few operations.  The bounded case would not find the element after the first time through...but would not the most amount of operations possible either.

5. Create a graph using the data below. Here's a CSV with the values you'll need.
6. What is the limit of the function above as n approaches infinity?
  The limit of the function is infinity. f(x) = (2^n).  As n approaches infinity so does the function.

7. What is the Big-O of an algorithm that has the data points above?
  The Big-O notation of the algorithm would be O(2^n).  Big-O of exponential time.

8. Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n.
Use it to generate a table of worst-case iterations of collections up to size 10.

  def linear_search(n)
    n
  end


9. Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.

10. What is the Big-O of binary search?
  The Big-O of binary search is 0(log n).

11. What is the Big-Ω of binary search?
  The Big-Omega of binary search is Omega(1)

12. What is the Big-Ө of binary search?
  The Big-Theta of binary search is Theta(log n).
